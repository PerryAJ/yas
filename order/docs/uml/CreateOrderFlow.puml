@startuml Create order flow
actor Client
box "YAS" #D6EAF8
participant NextJs
participant CartService as cart
participant OrderService as order
participant PaymentService as payment
participant PayPalService as ppal
end box
participant PaypalAPI as ppAPI

Client -> NextJs: Click "Proceed to payment"
activate NextJs
NextJs -> order: POST /api/order/storefront/orders
note right
    Body = {checkoutId, email, note, tax,
    discount, number of items, total price, delivery fee,
    coupon code, delivery method, payment status="PENDING",
    order items: [{id, product id, product name, quantity,
    product price, note?, discount?, taxAmount?, taxPercent?}]}

    Header: Authorization
end note
activate order
order --> NextJs: 201 CREATED
deactivate order
NextJs --> Client: 201 CREATED
NextJs -> ppal: POST /api/payment-paypal/init
activate ppal
ppal -> ppAPI: POST /orders
activate ppAPI
ppAPI --> ppal: Redirect API
deactivate ppAPI
ppal --> NextJs: Redirect API
deactivate ppal
NextJs --> Client: Redirect to PayPal payment
deactivate NextJs
Client -> ppAPI: GET payment page
activate ppAPI
ppAPI --> Client: 200 OK
Client -> ppAPI: POST payment
ppAPI --> Client: Redirect "/complete-payment/capture"
note left
token=
end note
deactivate ppAPI
Client -> NextJs: GET "/complete-payment/capture?token="
activate NextJs
NextJs -> ppal: POST "/payment-paypal/capture" with token
activate ppal
ppal -> ppAPI: GET order captures with token
activate ppAPI
ppAPI --> ppal: 200 OK
deactivate ppAPI
ppal -> payment: POST "/payment/capture"
activate payment
payment -> order: PUT "/order/storefront/checkout/status"
activate order
order --> payment: 200 OK
deactivate order
payment -> order: PUT "/order/storefront/checkout/status"
activate order
order --> payment: 200 OK
deactivate order
payment --> ppal: 201 CREATED
deactivate payment
ppal --> NextJs: 201 CREATED
deactivate ppal
NextJs --> Client: 200 OK
deactivate NextJs

deactivate NextJs
@enduml